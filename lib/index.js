// Generated by CoffeeScript 1.11.1
(function() {
  var MIXINS, cheerio, clone, compile, parse, transformKeysRecursive,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  parse = require('./parser').parse;

  cheerio = require('cheerio');

  clone = require('lodash.clone');

  MIXINS = {
    likebutton: function(data, arg) {
      var color, size;
      color = arg.color, size = arg.size;
      return parse("<div class=\"like_button\" data-post-id=\"" + data.attributes["post-id"] + "\" id=\"like_button_" + data.attributes["post-id"] + "\">\n  <iframe id=\"like_iframe_" + data.attributes["post-id"] + "\" src=\"http://assets.tumblr.com/assets/html/like_iframe.html?_v=1af0c0fbf0ad9b4dc38445698d099106#name={Name}&amp;post_id=" + data.attributes["post-id"] + "&amp;color=" + color + "&amp;rk=" + data.attributes.rk + "\" scrolling=\"no\" width=\"14\" height=\"14\" frameborder=\"0\" class=\"like_toggle\" allowTransparency=\"true\"></iframe>\n</div>");
    },
    reblogbutton: function(data, arg) {
      var color, size;
      color = arg.color, size = arg.size;
      return ["<a href=\"" + data.attributes.reblog_url + "\" class=\"reblog_button\" style=\"display: block; width:" + size + "px; height:" + size + "px;\">\n  <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 21 21\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" fill=\"" + color + "\">\n    <path d=\"M5.01092527,5.99908429 L16.0088498,5.99908429 L16.136,9.508 L20.836,4.752 L16.136,0.083 L16.1360004,3.01110845 L2.09985349,3.01110845 C1.50585349,3.01110845 0.979248041,3.44726568 0.979248041,4.45007306 L0.979248041,10.9999998 L3.98376463,8.30993634 L3.98376463,6.89801007 C3.98376463,6.20867902 4.71892527,5.99908429 5.01092527,5.99908429 Z\"></path>\n    <path d=\"M17.1420002,13.2800293 C17.1420002,13.5720293 17.022957,14.0490723 16.730957,14.0490723 L4.92919922,14.0490723 L4.92919922,11 L0.5,15.806 L4.92919922,20.5103758 L5.00469971,16.9990234 L18.9700928,16.9990234 C19.5640928,16.9990234 19.9453125,16.4010001 19.9453125,15.8060001 L19.9453125,9.5324707 L17.142,12.203\"></path>\n  </svg>\n</a>"];
    }
  };

  transformKeysRecursive = function(obj, fn) {
    var e, i, j, len, output, ref;
    output = {};
    for (i in obj) {
      if (Object.prototype.toString.apply(obj[i]) === '[object Object]') {
        output[fn(i)] = transformKeysRecursive(obj[i], fn);
      } else if (Array.isArray(obj[i])) {
        output[fn(i)] = [];
        ref = obj[i];
        for (j = 0, len = ref.length; j < len; j++) {
          e = ref[j];
          output[fn(i)].push(transformKeysRecursive(e, fn));
        }
      } else {
        output[fn(i)] = obj[i];
      }
    }
    return output;
  };

  compile = function(text, data) {
    var $, ast, compileBlock, i, j, k, key, l, len, len1, metaTags, post, ref, ref1, result, tag, type, v;
    if (data == null) {
      data = {};
    }
    data = clone(data);
    $ = cheerio.load(text);
    metaTags = $('meta');
    for (j = 0, len = metaTags.length; j < len; j++) {
      tag = metaTags[j];
      key = $(tag).attr('name');
      v = $(tag).attr('content');
      if ((key == null) || (data[key] != null)) {
        continue;
      }
      if (key.slice(0, 3) === 'if:') {
        if (v === '0') {
          v = false;
        } else if (v === '1') {
          v = true;
        }
      }
      data[key] = v;
    }
    if ((data != null ? data['block:Posts'] : void 0) != null) {
      ref = data['block:Posts'];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        post = ref[k];
        type = post['PostType'];
        post["block:" + type] = true;
      }
    }
    data = transformKeysRecursive(data, function(key) {
      key = key.toLowerCase();
      if (key.slice(0, 3) === 'if:') {
        key = key.replace(/\s/g, '');
      }
      return key;
    });
    compileBlock = function(ast, data, searchParentScope) {
      var compileElement, element, l, len2, output, searchScope;
      searchScope = function(type, tagName) {
        var l, len2, ref1, value;
        key = (type === '' ? tagName : type + ":" + tagName);
        value = data[key];
        if ((value == null) && type === 'if') {
          ref1 = Object.keys(data);
          for (l = 0, len2 = ref1.length; l < len2; l++) {
            key = ref1[l];
            if (tagName === key.replace(/\s/g, '').replace(/^[a-z]+:/, '')) {
              value = data[key];
              break;
            }
          }
        }
        if ((value == null) && (searchParentScope != null)) {
          value = searchParentScope(type, tagName);
        }
        if (type === '' && typeof value === 'object' && indexOf.call(Object.keys(MIXINS), tagName) >= 0) {
          return MIXINS[tagName].bind(this, value);
        }
        return value;
      };
      compileElement = function(element) {
        var blockName, blockType, context, invert, l, len2, out, ref1, value;
        if (typeof element === 'string') {
          return element;
        } else if (element.type !== 'block') {
          value = searchScope(element.type, element.tagName);
          if (value != null) {
            if (typeof value === 'function') {
              return compileBlock(value(element.attributes), data, searchScope);
            } else {
              return value;
            }
          } else {
            console.warn("Variable \"" + key + "\" is undefined");
            return '';
          }
        } else {
          ref1 = (element.tagName.slice(0, 5) === 'ifnot' ? ['if', "" + element.tagName.slice(5), true] : element.tagName.slice(0, 2) === 'if' ? ['if', "" + element.tagName.slice(2), false] : ['block', "" + element.tagName, false]), blockType = ref1[0], blockName = ref1[1], invert = ref1[2];
          value = searchScope(blockType, blockName);
          if (blockType === 'if') {
            if ((value != null) && value !== '') {
              if (typeof value !== 'boolean') {
                value = true;
              }
            } else {
              value = false;
            }
            if (invert) {
              value = !value;
            }
          }
          if (typeof value === 'boolean' && value) {
            return compileBlock(element.contents, data, searchScope);
          } else if (Array.isArray(value)) {
            out = '';
            for (l = 0, len2 = value.length; l < len2; l++) {
              context = value[l];
              out += compileBlock(element.contents, context, searchScope);
            }
            return out;
          } else if (typeof value === 'object') {
            return compileBlock(element.contents, value, searchScope);
          } else {
            return '';
          }
        }
      };
      output = '';
      for (l = 0, len2 = ast.length; l < len2; l++) {
        element = ast[l];
        output += compileElement(element);
      }
      return output;
    };
    ast = parse(text);
    result = compileBlock(ast, data).split('\n');
    for (i = l = 0, ref1 = result.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
      result[i] = result[i].trimRight();
    }
    result = result.filter(function(val, i, arr) {
      return !(val === '' && arr[i - 1] === '');
    });
    return result.join('\n');
  };

  module.exports = {
    compile: compile,
    parse: parse
  };

}).call(this);
